

The GlobalExceptionHandler class is a Spring Boot controller advice class designed to handle exceptions globally across the application. Here's an explanation of the components and their functionality:

Annotations and Class Explanation:
@Builder: This annotation is from the Lombok library. It generates a builder pattern for the class, allowing you to build instances of GlobalExceptionHandler using a fluent API.

@ControllerAdvice: This annotation is used to define a global exception handler. It allows you to handle exceptions across the whole application in one place. Any class annotated with @ControllerAdvice becomes a global interceptor of exceptions thrown by methods annotated with @RequestMapping or one of the shortcut annotations like @GetMapping or @PostMapping.

Method Explanation:
@ExceptionHandler(HttpMessageNotReadableException.class): This annotation specifies that the handleJsonParseException method will handle HttpMessageNotReadableException. This exception is typically thrown when the HTTP request body cannot be parsed, often due to invalid JSON format.

@ResponseStatus(HttpStatus.BAD_REQUEST): This annotation sets the HTTP status code of the response to 400 (Bad Request) when this exception handler is invoked.

@ResponseBody: This annotation ensures that the return value of the method is written directly to the HTTP response body, rather than being interpreted as a view name.

ResponseUtil<Object> handleJsonParseException(HttpMessageNotReadableException ex): This method handles the HttpMessageNotReadableException. It constructs a ResponseUtil object with a 400 status code, a success flag set to false, a message indicating invalid payload, and the error message from the exception.

When the Advice Controller is Called:
The advice controller, GlobalExceptionHandler, is called whenever an exception is thrown from any controller within the application that matches the type specified in @ExceptionHandler. In this case, when a HttpMessageNotReadableException is thrown, the handleJsonParseException method is invoked to handle the exception and provide a structured response.





=============================================================================================================================================


package com.basic.exception;
import com.basic.util.ResponseUtil;
import lombok.Builder;
import org.springframework.http.HttpStatus;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.servlet.resource.NoResourceFoundException;

@Builder
@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(HttpMessageNotReadableException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ResponseBody
    public ResponseUtil<Object> handleJsonParseException(HttpMessageNotReadableException ex) {
        ResponseUtil<Object> response = ResponseUtil.builder()
                .status(HttpStatus.BAD_REQUEST.value())
                .success(false)
                .message("invalid.http.payload")
                .error(ex.getMessage())
                .build();
        return response;


    }


    @ExceptionHandler(NoResourceFoundException.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    @ResponseBody
    public ResponseUtil<Object> handleResourceNotFoundException(NoResourceFoundException ex) {
        ResponseUtil<Object> response = ResponseUtil.builder()
                .status(HttpStatus.NOT_FOUND.value())
                .success(false)
                .message("resource.not.found")
                .error(ex.getMessage())
                .build();
        return response;

    }

}


